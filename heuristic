from tree import *
import heapq

def minimumSpanningTree(cities : List [City], visited : Set[str]) -> float:
  unvisited = [city for city in cities if city.name not in visited]
  mst_cost = 0.0
  if unvisited:
  #Prim algorithm
    startCity = unvisited[0]
    edges = [] 
    heapq.heappush(edges, (0, startCity))
    while edges:
      cost, city = heapq.heappop(edges)
      if city.name not in visited:
        visited.add(city.name)
        mst_cost += cost
        for neighbor in unvisited:
          if neighbor.name not in visited:
            distance = city.distance(neighbor)
            heapq.heappush(edges, (distance, neighbor))
    return mst_cost
  
